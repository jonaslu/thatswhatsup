(def! not
  (fn* (a)
    (if a
      false
      true
    )
  )
)

(defmacro! cond
  (fn* (& xs)
    (if (not (empty? xs))
      (list 'if (first xs)
        (first (rest xs))
        (cons 'cond (rest (rest xs)))
        ;; Index out of bounds
      )
    )
  )
)

(defmacro! or
  (fn* (& xs)
    (if (not (empty? xs))
      (list
        'if (first xs)
          (first xs)
          (list
            'if (empty? (rest xs))
            false
            (cons 'or (rest xs))
          )
      )
    )
  )
)

;; I getz tired of writing (def! name (fn* (args) (body)))
(defmacro! defn
  (fn* (name, args, body)
    `(def! ~name
      (fn* ~args ~body)
    )
  )
)
