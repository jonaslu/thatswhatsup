(def! not
  (fn* (a)
    (if a
      false
      true
    )
  )
)

(defmacro! cond
  (fn* (& xs)
    (if (not (empty? xs))
      (list 'if (first xs)
        (first (rest xs))
        (cons 'cond (rest (rest xs)))
        ;; Index out of bounds if cond pair is not evenly divisible
      )
    )
  )
)

(def! *gensym-counter* (atom 0))

(def! gensym
  (fn* []
    (symbol
      (str "G__"
        (swap! *gensym-counter*
          (fn* [x] (+ 1 x))
        )
      )
    )
  )
)

(defmacro! or
  (fn* (& xs)
    (if (empty? xs)
      nil
      (if (= 1 (count xs))
        (first xs)
        (let*
          (condvar (gensym))
          `(let*
            (~condvar ~(first xs))
            (if ~condvar
              ~condvar
              (or ~@(rest xs))
            )
          )
        )
      )
    )
  )
)

;; I getz tired of writing (def! name (fn* (args) (body)))
(defmacro! defn
  (fn* (name, args, body)
    `(def! ~name
      (fn* ~args ~body)
    )
  )
)
